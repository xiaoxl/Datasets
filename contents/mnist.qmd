
# `MNIST` dataset
This is a famous dataset for handwritten digits recognition. More info can be found from [its website](https://yann.lecun.com/exdb/mnist/).
There are several versions of the dataset (that almost all machine learning libraries have it in their datasets). Here I provide the version from Huggingface Hub. The tensorflow version is updated but kept here.


## Huggingface Hub
The dataset and description can be found from the [Hugging Face hub](https://huggingface.co/datasets/ylecun/mnist). You may use the following code to load the dataset. The installation guide of the `datasets` library can be found in its [homepage](https://huggingface.co/docs/datasets/en/installation).

```{python}
#| warning: false
#| output: false
from datasets import load_dataset

mnist_train = load_dataset("ylecun/mnist", split='train', streaming=True)
mnist_test = load_dataset("ylecun/mnist", split='test', streaming=True)
```
The loaded datasets contains images. We may directly visualize it. Note that we load the dataset in streaming mode, so it is a generator and will give images one by one.

```{python}
nextdata = next(iter(mnist_train))
pic = nextdata['image']
label = nextdata['label']
pic
```

```{python}
label
```

If we want to use the data, we would like to turn them into matrices. Here we directly flatten the images into row vectors.

```{python}
import numpy as np

def stream_to_array(streaming):
    pic_list = []
    label_list =[]
    for data in streaming:
        pic_list.append(np.array(data['image']).reshape(-1))
        label_list.append(data['label'])
    return np.array(pic_list), np.array(label_list)

X_train, y_train = stream_to_array(mnist_train)
X_test, y_test = stream_to_array(mnist_test)
```

We could check the size of these data.

```{python}
print(f"The size of training features is {X_train.shape}.")
print(f"The size of training labels is {y_train.shape}.")
print(f"The size of testing features is {X_test.shape}.")
print(f"The size of testing labels is {y_test.shape}.")
```


## `tensorflow` version (possibly outdated)
`tensorflow`/`keras` provides the data with the original split. This version is not recommended since `keras` changed a lot during recent updates so if you use newer version the following code might not work. In addition it takes a long time to install `tensorflow` library.


```{python}
#| eval: false
import tensorflow.keras as keras
(X_train, y_train), (X_test, y_test) = keras.datasets.mnist.load_data()
```
