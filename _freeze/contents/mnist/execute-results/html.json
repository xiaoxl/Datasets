{
  "hash": "d4a382434aebec7f4f052e16a8cba631",
  "result": {
    "engine": "jupyter",
    "markdown": "# `MNIST` dataset\nThis is a famous dataset for handwritten digits recognition. More info can be found from [its website](https://yann.lecun.com/exdb/mnist/).\nThere are several versions of the dataset (that almost all machine learning libraries have it in their datasets). Here I provide the version from Huggingface Hub. The tensorflow version is outdated but kept here for reference.\n\n\n## Huggingface Hub\nThe dataset and description can be found from the [Hugging Face hub](https://huggingface.co/datasets/ylecun/mnist). You may use the following code to load the dataset. The installation guide of the `datasets` library can be found in its [homepage](https://huggingface.co/docs/datasets/en/installation).\n\n\n### Dataset mode\n\nWe may also load it directly in dataset mode. \n\n::: {#caa837ad .cell execution_count=1}\n``` {.python .cell-code}\nfrom datasets import load_dataset\n\nmnist_train = load_dataset(\"ylecun/mnist\", split='train')\nmnist_test = load_dataset(\"ylecun/mnist\", split='test')\n\nmnist_train\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nDataset({\n    features: ['image', 'label'],\n    num_rows: 60000\n})\n```\n:::\n:::\n\n\n::: {#c7d77ba8 .cell execution_count=2}\n``` {.python .cell-code}\nmnist_test\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nDataset({\n    features: ['image', 'label'],\n    num_rows: 10000\n})\n```\n:::\n:::\n\n\nThe data point can be accessed by\n\n::: {#d00dc99e .cell execution_count=3}\n``` {.python .cell-code}\nmnist_train[0]['image']\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n![](mnist_files/figure-html/cell-4-output-1.png){}\n:::\n:::\n\n\n::: {#f8adc958 .cell execution_count=4}\n``` {.python .cell-code}\nmnist_train[0]['label']\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n5\n```\n:::\n:::\n\n\n::: {#76607e3a .cell execution_count=5}\n``` {.python .cell-code}\nmnist_train['image'][:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n[<PIL.PngImagePlugin.PngImageFile image mode=L size=28x28>,\n <PIL.PngImagePlugin.PngImageFile image mode=L size=28x28>,\n <PIL.PngImagePlugin.PngImageFile image mode=L size=28x28>]\n```\n:::\n:::\n\n\n::: {#c2071322 .cell execution_count=6}\n``` {.python .cell-code}\nmnist_train['label'][:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n[5, 0, 4]\n```\n:::\n:::\n\n\nNote that you may either slice the dataset, or slice its field (e.g. image or label).\n\nSince we would like to work with matrices instead of the \"image\" object, we could use `map` to transform them.\n\n::: {#7fb2be3d .cell execution_count=7}\n``` {.python .cell-code}\nimport numpy as np\n\ndef pil_to_array(data):\n    data['image'] = np.array(data['image']).reshape(1, -1)\n    return data\n\nmnist_train_processed = mnist_train.map(pil_to_array)\nmnist_test_processed = mnist_test.map(pil_to_array)\n\nX_train = np.array(mnist_train_processed['image'])\ny_train = np.array(mnist_train_processed['label']).reshape(-1)\nX_test = np.array(mnist_test_processed['image'])\ny_test = np.array(mnist_test_processed['label']).reshape(-1)\n```\n:::\n\n\n### Streaming mode\n\n::: {#f91bfe92 .cell execution_count=8}\n``` {.python .cell-code}\nmnist_train_streaming = load_dataset(\"ylecun/mnist\", split='train', streaming=True)\nmnist_test_streaming = load_dataset(\"ylecun/mnist\", split='test', streaming=True)\n```\n:::\n\n\nThe loaded datasets contains images. We may directly visualize it. Note that we load the dataset in streaming mode, so it is a generator and will give images one by one.\n\n::: {#2f64274a .cell execution_count=9}\n``` {.python .cell-code}\nnextdata = next(iter(mnist_train))\npic = nextdata['image']\nlabel = nextdata['label']\npic\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n![](mnist_files/figure-html/cell-10-output-1.png){}\n:::\n:::\n\n\n::: {#4ab12fa4 .cell execution_count=10}\n``` {.python .cell-code}\nlabel\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n5\n```\n:::\n:::\n\n\nIf we first get the dataset mode, it could be transformed into the streaming mode.\n\n::: {#1ac772f2 .cell execution_count=11}\n``` {.python .cell-code}\nmnist_train = load_dataset(\"ylecun/mnist\", split='train')\niter_train = mnist_train.to_iterable_dataset()\n\nnextdata = next(iter(iter_train))\npic = nextdata['image']\npic\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n![](mnist_files/figure-html/cell-12-output-1.png){}\n:::\n:::\n\n\nWe could also apply the transformations to the streaming data.\n\n::: {#8bfc365c .cell execution_count=12}\n``` {.python .cell-code}\nimport numpy as np\n\ndef pil_to_array(data):\n    data['image'] = np.array(data['image']).reshape(1, -1)\n    return data\n    \nmnist_train = load_dataset(\"ylecun/mnist\", split='train')\nmnist_test = load_dataset(\"ylecun/mnist\", split='test')\niter_train = mnist_train.to_iterable_dataset().map(pil_to_array)\niter_test = mnist_test.to_iterable_dataset().map(pil_to_array)\n```\n:::\n\n\n## `tensorflow` version (possibly outdated)\n`tensorflow`/`keras` provides the data with the original split. This version is not recommended since `keras` changed a lot during recent updates so if you use newer version the following code might not work. In addition it takes a long time to install `tensorflow` library.\n\n::: {#0278f018 .cell execution_count=13}\n``` {.python .cell-code}\nimport tensorflow.keras as keras\n(X_train, y_train), (X_test, y_test) = keras.datasets.mnist.load_data()\n```\n:::\n\n\n",
    "supporting": [
      "mnist_files"
    ],
    "filters": [],
    "includes": {}
  }
}